/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AdminUsersIndexRouteImport } from './routes/admin/users/index'
import { Route as AdminUsersNewRouteImport } from './routes/admin/users/new'
import { Route as AdminUsersUserIdRouteImport } from './routes/admin/users/$userId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersNewRoute = AdminUsersNewRouteImport.update({
  id: '/admin/users/new',
  path: '/admin/users/new',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUsersUserIdRoute = AdminUsersUserIdRouteImport.update({
  id: '/admin/users/$userId',
  path: '/admin/users/$userId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin': typeof AdminIndexRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/new': typeof AdminUsersNewRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin': typeof AdminIndexRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/new': typeof AdminUsersNewRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/admin/': typeof AdminIndexRoute
  '/admin/users/$userId': typeof AdminUsersUserIdRoute
  '/admin/users/new': typeof AdminUsersNewRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/demo/tanstack-query'
    | '/admin'
    | '/admin/users/$userId'
    | '/admin/users/new'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/demo/tanstack-query'
    | '/admin'
    | '/admin/users/$userId'
    | '/admin/users/new'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/demo/tanstack-query'
    | '/admin/'
    | '/admin/users/$userId'
    | '/admin/users/new'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminUsersUserIdRoute: typeof AdminUsersUserIdRoute
  AdminUsersNewRoute: typeof AdminUsersNewRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users/new': {
      id: '/admin/users/new'
      path: '/admin/users/new'
      fullPath: '/admin/users/new'
      preLoaderRoute: typeof AdminUsersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/users/$userId': {
      id: '/admin/users/$userId'
      path: '/admin/users/$userId'
      fullPath: '/admin/users/$userId'
      preLoaderRoute: typeof AdminUsersUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminUsersUserIdRoute: AdminUsersUserIdRoute,
  AdminUsersNewRoute: AdminUsersNewRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
