#!/usr/bin/env node

/**
 * Stable API type generation script
 * This script generates API types and ensures consistent formatting to minimize PR diffs
 */

import { execSync } from 'child_process';
import { readFileSync, writeFileSync } from 'fs';

const API_TYPES_PATH = 'src/types/api.ts';

console.log('üîÑ Generating API types with stable formatting...');

try {
  // Generate the types using openapi-typescript
  execSync('npx openapi-typescript ../docs/openapi.json -o src/types/api.ts --format', { 
    stdio: 'inherit' 
  });

  // Read the generated file
  let content = readFileSync(API_TYPES_PATH, 'utf8');

  // Apply consistent formatting transformations to stabilize output
  content = content
    // Normalize line endings
    .replace(/\r\n/g, '\n')
    // Fix broken line formatting around parameters
    .replace(/; }/g, ';\n\t\t}')
    .replace(/\{ query\?/g, '{\n\t\t\tquery?')
    .replace(/; header\?/g, ';\n\t\t\theader?')
    .replace(/; path\?/g, ';\n\t\t\tpath?')
    .replace(/; cookie\?/g, ';\n\t\t\tcookie?')
    // Fix comment placement
    .replace(/\} \/\*\*/g, '\n\t\t};\n\t\t/**')
    // Ensure consistent spacing around colons in object properties
    .replace(/:\s+/g, ': ')
    // Remove trailing whitespace
    .replace(/[ \t]+$/gm, '')
    // Convert spaces to tabs for consistency with Biome config
    .replace(/^( {4})+/gm, (match) => '\t'.repeat(match.length / 4))
    // Ensure file ends with single newline
    .replace(/\n*$/, '\n');

  // Add a stable header comment to reduce unnecessary diffs
  const header = `/**
 * Auto-generated API types from OpenAPI specification
 * Generated on: ${new Date().toISOString().split('T')[0]}
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Run 'pnpm generate-api' to regenerate
 */

`;

  // Only add header if it doesn't exist
  if (!content.includes('DO NOT EDIT THIS FILE MANUALLY')) {
    content = header + content;
  }

  // Write the cleaned content back
  writeFileSync(API_TYPES_PATH, content, 'utf8');

  console.log('‚úÖ API types generated with stable formatting');

} catch (error) {
  console.error('‚ùå Failed to generate API types:', error.message);
  process.exit(1);
}