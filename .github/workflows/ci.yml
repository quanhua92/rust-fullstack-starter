name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      # Test database configuration
      STARTER__DATABASE__HOST: localhost
      STARTER__DATABASE__PORT: 5432
      STARTER__DATABASE__USER: test_user
      STARTER__DATABASE__PASSWORD: test_password
      STARTER__DATABASE__DATABASE: test_db
      STARTER__DATABASE__MAX_CONNECTIONS: 5
      STARTER__DATABASE__MIN_CONNECTIONS: 1
      # Test server configuration
      STARTER__SERVER__HOST: 127.0.0.1
      STARTER__SERVER__PORT: 8080
      # Test auth configuration
      STARTER__AUTH__SESSION_DURATION_HOURS: 24
      STARTER__AUTH__CLEANUP_INTERVAL_SECS: 3600
      # Test worker configuration
      STARTER__WORKER__CONCURRENCY: 2
      STARTER__WORKER__POLL_INTERVAL_SECS: 1
      STARTER__WORKER__MAX_RETRIES: 3
      STARTER__WORKER__RETRY_BACKOFF_BASE_SECS: 1
      # Test environment
      RUST_LOG: debug
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: starter

    - name: Check formatting
      run: cargo fmt --manifest-path starter/Cargo.toml --all -- --check

    - name: Run Clippy
      run: cargo clippy --manifest-path starter/Cargo.toml --all-targets --all-features -- -D warnings

    - name: Install sqlx-cli
      run: cargo install sqlx-cli --no-default-features --features postgres

    - name: Run database migrations
      run: |
        cd starter
        sqlx migrate run --database-url postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run unit tests
      run: cargo test --manifest-path starter/Cargo.toml --lib

    - name: Run integration tests
      run: cargo test --manifest-path starter/Cargo.toml --test '*'

    - name: Test health check command
      run: |
        cd starter
        timeout 30s cargo run --bin starter -- health-check || true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: starter

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Run security audit
      run: cargo audit --db https://github.com/RustSec/advisory-db.git

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Run dependency checks
      run: cargo deny --manifest-path starter/Cargo.toml check

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Add your staging deployment script here
        # For example, using kubectl, helm, or docker-compose

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Tag: ${{ github.ref_name }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        # Add your production deployment script here
        # For example, using kubectl, helm, or docker-compose

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All checks passed!"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        echo "Test: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Build: ${{ needs.build.result }}"
        # Add notification logic here (Slack, Discord, email, etc.)