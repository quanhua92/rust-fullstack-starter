name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-check:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: starter

    - name: Install cargo-audit
      run: cargo install cargo-audit --locked

    - name: Run dependency audit
      run: |
        echo "üîç Running cargo-audit..."
        cargo audit --db https://github.com/RustSec/advisory-db.git --format json > audit-report.json || true
        
        # Display human-readable output
        cargo audit --db https://github.com/RustSec/advisory-db.git

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: audit-report.json
        retention-days: 30

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: starter

    - name: Install cargo-deny
      run: cargo install cargo-deny --locked

    - name: Check licenses and dependencies
      run: |
        echo "üîç Running license and dependency checks..."
        cargo deny --manifest-path starter/Cargo.toml check

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before || 'HEAD~1' }}
        head: HEAD
        extra_args: --debug --only-verified

  docker-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        load: true
        tags: starter-app:security-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'starter-app:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-container'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem'

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'rust' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: starter

    - name: Build project
      run: cargo build --manifest-path starter/Cargo.toml --release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, license-check, secret-scan, docker-security, codeql]
    if: always()
    
    steps:
    - name: Generate security report
      run: |
        echo "# üîí Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Check | Status |" >> security-summary.md
        echo "|-------|--------|" >> security-summary.md
        echo "| Dependency Audit | ${{ needs.dependency-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> security-summary.md
        echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> security-summary.md
        echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> security-summary.md
        echo "| Container Security | ${{ needs.docker-security.result == 'success' && '‚úÖ Pass' || needs.docker-security.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Fail' }} |" >> security-summary.md
        echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '‚úÖ Pass' || needs.codeql.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Fail' }} |" >> security-summary.md
        echo "" >> security-summary.md
        echo "Generated on: $(date -u)" >> security-summary.md
        
        cat security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 30

    - name: Check for failures
      run: |
        FAILED_JOBS=""
        
        if [ "${{ needs.dependency-check.result }}" == "failure" ]; then
          FAILED_JOBS="$FAILED_JOBS dependency-check"
        fi
        
        if [ "${{ needs.license-check.result }}" == "failure" ]; then
          FAILED_JOBS="$FAILED_JOBS license-check"
        fi
        
        if [ "${{ needs.secret-scan.result }}" == "failure" ]; then
          FAILED_JOBS="$FAILED_JOBS secret-scan"
        fi
        
        if [ "${{ needs.docker-security.result }}" == "failure" ]; then
          FAILED_JOBS="$FAILED_JOBS docker-security"
        fi
        
        if [ "${{ needs.codeql.result }}" == "failure" ]; then
          FAILED_JOBS="$FAILED_JOBS codeql"
        fi
        
        if [ -n "$FAILED_JOBS" ]; then
          echo "‚ùå Security scan failures detected in: $FAILED_JOBS"
          echo "Check the Security tab for detailed results"
          exit 1
        else
          echo "‚úÖ All security scans passed!"
        fi