# Multi-stage production Docker build
# Optimized for minimal size, security, and fast builds with cargo-chef

# Stage 1: Build the React Frontend
FROM node:20-alpine AS frontend-builder
WORKDIR /app

# Install pnpm, which is used by the project
RUN npm install -g pnpm

# Copy package manifests first to leverage Docker layer caching
COPY web/package.json web/pnpm-lock.yaml ./web/
# Install frontend dependencies
RUN cd web && pnpm install --frozen-lockfile

# Copy the rest of the web app source code
COPY web ./web
# Build the production-ready static files
RUN cd web && pnpm build

# Stage 2: Build the Rust Backend
FROM clux/muslrust:1.88.0-stable-2025-07-27 AS chef
USER root
RUN cargo install cargo-chef
WORKDIR /app

FROM chef AS rust-planner
WORKDIR /app

# Copy workspace files
COPY ./Cargo.lock ./Cargo.lock
COPY ./Cargo.toml ./Cargo.toml
# Copy starter package
COPY ./starter/Cargo.toml ./starter/Cargo.toml
COPY ./starter/src ./starter/src
RUN cargo chef prepare --recipe-path recipe.json --bin starter

FROM chef AS rust-cacher
WORKDIR /app
ARG TARGETPLATFORM

# Copy workspace structure for dependency building
COPY --from=rust-planner /app/recipe.json recipe.json
COPY ./Cargo.toml ./Cargo.toml
COPY ./starter/Cargo.toml ./starter/Cargo.toml

RUN export TARGET_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
         "linux/amd64") echo "x86_64-unknown-linux-musl" ;; \
         "linux/arm64") echo "aarch64-unknown-linux-musl" ;; \
         *) echo "aarch64-unknown-linux-musl" ;; \
    esac) && \
    echo "Installing Rust target: ${TARGET_ARCH}" && \
    rustup target add ${TARGET_ARCH} && \
    echo "Cooking dependencies for target: ${TARGET_ARCH}" && \
    cargo chef cook --release --target ${TARGET_ARCH} --recipe-path recipe.json --bin starter

FROM chef AS rust-builder
WORKDIR /app
ARG TARGETPLATFORM

# Copy cached dependencies and workspace structure
COPY --from=rust-cacher /app/target target
COPY ./Cargo.lock ./Cargo.lock
COPY ./Cargo.toml ./Cargo.toml
# Copy complete starter package
COPY ./starter ./starter

RUN export TARGET_ARCH=$(case ${TARGETPLATFORM:-linux/amd64} in \
         "linux/amd64") echo "x86_64-unknown-linux-musl" ;; \
         "linux/arm64") echo "aarch64-unknown-linux-musl" ;; \
         *) echo "aarch64-unknown-linux-musl" ;; \
    esac) && \
    echo "Installing Rust target: ${TARGET_ARCH}" && \
    rustup target add ${TARGET_ARCH} && \
    echo "Building binary for target: ${TARGET_ARCH}" && \
    SQLX_OFFLINE=true cargo build --release --target ${TARGET_ARCH} --bin starter && \
    cp target/${TARGET_ARCH}/release/starter /app/starter-bin

# Stage 3: Create the final, minimal production image
FROM alpine:3.22 AS final-image
WORKDIR /app

# Install ca-certificates for HTTPS requests
RUN apk add --no-cache ca-certificates

# Create non-root user for security
RUN addgroup -S appgroup && adduser -S -G appgroup appuser

# Set default environment variables
ENV RUST_LOG="info"
ENV WEB_BUILD_PATH="./web/dist"

# Copy the compiled React assets from the frontend-builder stage
COPY --from=frontend-builder /app/web/dist ./web/dist

# Copy the compiled binary from rust-builder stage
COPY --from=rust-builder /app/starter-bin ./starter

# Copy migration files
COPY --from=rust-builder /app/starter/migrations ./migrations

# Change ownership to non-root user
RUN chown -R appuser:appgroup /app

# Use non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["./starter", "health-check"] || exit 1

# Expose port
EXPOSE 3000

# Default command
CMD ["./starter", "server", "--port", "3000"]