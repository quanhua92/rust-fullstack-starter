# PostgreSQL deployment for Kubernetes
# For production, consider using a managed database service or operator

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: starter-app
data:
  POSTGRES_DB: "starter_prod"
  POSTGRES_USER: "starter_user"
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: starter-app
type: Opaque
data:
  # Base64 encoded password - replace with actual value
  # echo -n "your_strong_database_password" | base64
  POSTGRES_PASSWORD: eW91cl9zdHJvbmdfZGF0YWJhc2VfcGFzc3dvcmQ=  # your_strong_database_password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: starter-app
  labels:
    app: postgres
spec:
  replicas: 1  # PostgreSQL should not be scaled horizontally without special setup
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secret
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Persistent storage
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Security context
        securityContext:
          runAsUser: 999  # postgres user
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: starter-app
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: starter-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  # storageClassName: fast-ssd  # Specify storage class if needed