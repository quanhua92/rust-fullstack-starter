# Production Docker Compose configuration
# Optimized for reliability, security, and monitoring

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # Database configuration
      - STARTER__DATABASE__HOST=postgres
      - STARTER__DATABASE__PORT=5432
      - STARTER__DATABASE__DATABASE=${POSTGRES_DB:-starter_prod}
      - STARTER__DATABASE__USERNAME=${POSTGRES_USER:-starter_user}
      - STARTER__DATABASE__PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-starter_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-starter_prod}
      
      # Application configuration
      - STARTER__SERVER__HOST=0.0.0.0
      - STARTER__SERVER__PORT=8080
      - STARTER__AUTH__SESSION_SECRET=${SESSION_SECRET}
      - STARTER__AUTH__SESSION_DURATION=${SESSION_DURATION:-86400}
      
      # Security
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-0}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/starter", "health-check"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: ["/app/starter", "worker"]
    environment:
      # Database configuration (same as app)
      - STARTER__DATABASE__HOST=postgres
      - STARTER__DATABASE__PORT=5432
      - STARTER__DATABASE__DATABASE=${POSTGRES_DB:-starter_prod}
      - STARTER__DATABASE__USERNAME=${POSTGRES_USER:-starter_user}
      - STARTER__DATABASE__PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-starter_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-starter_prod}
      
      # Worker configuration
      - STARTER__WORKER__MAX_CONCURRENT_TASKS=${WORKER_CONCURRENCY:-4}
      - STARTER__WORKER__POLL_INTERVAL=${WORKER_POLL_INTERVAL:-5000}
      
      # Logging
      - RUST_LOG=${RUST_LOG:-info}
      - RUST_BACKTRACE=${RUST_BACKTRACE:-0}
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "starter.*worker"] 
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-starter_prod}
      - POSTGRES_USER=${POSTGRES_USER:-starter_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:rw
      # Production backup script
      - ./scripts/backup-db.sh:/usr/local/bin/backup-db.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-starter_user} -d ${POSTGRES_DB:-starter_prod}"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c temp_file_limit=2GB
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    networks:
      - app-network

  # Redis for production caching/sessions (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'
    networks:
      - app-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.125'
    networks:
      - app-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16